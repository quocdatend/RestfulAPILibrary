const Document = require('../schemas/document');
const Category = require('../schemas/category')
// üü¢ T·∫°o m·ªõi document
exports.createDocument = async (req, res) => {
    try {
        // L·∫•y d·ªØ li·ªáu t·ª´ req.body
        const {
            title,
            description,
            education_level,
            category_id,
            user_id,
            file_url,
            file_size,
            file_type,
            tags,
            status
        } = req.body;

        // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!title || !category_id || !user_id || !file_url || !file_size || !file_type) {
            return res.status(400).json({
                message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: title, category_id, user_id, file_url, file_size, file_type'
            });
        }

        // T·∫°o ƒë·ªëi t∆∞·ª£ng document m·ªõi v·ªõi c√°c tr∆∞·ªùng t·ª´ req.body
        const document = new Document({
            title,
            description: description || '', // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng cung c·∫•p
            education_level: education_level || 'none', // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng cung c·∫•p
            category_id,
            user_id,
            file_url,
            file_size,
            file_type,
            tags: tags || [], // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng cung c·∫•p
            status: status || 'public' // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng cung c·∫•p
            // C√°c tr∆∞·ªùng kh√°c nh∆∞ rating_avg, download_count, views, isDeleted s·∫Ω d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ schema
        });

        // L∆∞u document v√†o database
        await document.save();

        // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
        res.status(201).json({
            message: 'T√†i li·ªáu ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
            document
        });
    } catch (error) {
        // X·ª≠ l√Ω l·ªói chi ti·∫øt h∆°n
        console.error('L·ªói khi t·∫°o t√†i li·ªáu:', error);
        if (error.name === 'ValidationError') {
            // L·ªói validation t·ª´ Mongoose
            return res.status(400).json({
                message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
                errors: error.errors
            });
        }
        // L·ªói server chung
        res.status(500).json({
            message: 'L·ªói server khi t·∫°o t√†i li·ªáu',
            error: error.message
        });
    }
};

// üü¢ L·∫•y t·∫•t c·∫£ documents (ch·ªâ l·∫•y t√†i li·ªáu ch∆∞a b·ªã x√≥a)
exports.getAllDocuments = async (req, res) => {
    try {
        const documents = await Document.find({ isDeleted: false })
            .populate('category_id', 'name description');  

        res.status(200).json({ success: true, data: documents });
    } catch (error) {
        console.error('L·ªói khi l·∫•y danh s√°ch t√†i li·ªáu:', error);
        res.status(500).json({ success: false, message: error.message });
    }
};

// üü¢ L·∫•y t√†i li·ªáu theo ID
exports.getDocumentById = async (req, res) => {
    try {
        const document = await Document.findById(req.params.id)
            .populate('category_id', 'name description');

        if (!document || document.isDeleted) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y t√†i li·ªáu' });
        }

        res.status(200).json({ success: true, data: document });
    } catch (error) {
        console.error('L·ªói khi l·∫•y t√†i li·ªáu:', error);
        res.status(500).json({ success: false, message: error.message });
    }
};

// üü¢ C·∫≠p nh·∫≠t document
exports.updateDocument = async (req, res) => {
    try {
        const { title, category_id, user_id, file_url } = req.body;  // Thay subject_id th√†nh category_id

        const document = await Document.findById(req.params.id);
        if (!document || document.isDeleted) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y t√†i li·ªáu' });
        }

        document.title = title || document.title;
        document.category_id = category_id || document.category_id;  // Thay subject_id th√†nh category_id
        document.user_id = user_id || document.user_id;
        document.file_url = file_url || document.file_url;

        await document.save();

        res.status(200).json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng', document });
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t t√†i li·ªáu:', error);
        res.status(500).json({ error: 'L·ªói server', message: error.message });
    }
};

// üü¢ X√≥a document (c·∫≠p nh·∫≠t `isDeleted = true`)
exports.deleteDocument = async (req, res) => {
    try {
        const document = await Document.findByIdAndUpdate(
            req.params.id,
            { isDeleted: true },
            { new: true }
        );

        if (!document) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y t√†i li·ªáu' });
        }
        res.status(200).json({ message: 'T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a', document });
    } catch (error) {
        console.error('L·ªói khi x√≥a t√†i li·ªáu:', error);
        res.status(500).json({ error: 'L·ªói server', message: error.message });
    }
};

// Route: GET /documents/category/:category_id
exports.getDocumentsByCategory = async (req, res) => {
    try {
        const { category_id } = req.params;

        const documents = await Document.find({ 
                category_id, 
                isDeleted: false 
            })
            .populate('category_id', 'name description');

        res.status(200).json({ success: true, data: documents });
    } catch (error) {
        console.error('L·ªói khi l·∫•y t√†i li·ªáu theo th·ªÉ lo·∫°i:', error);
        res.status(500).json({ success: false, message: error.message });
    }
};
